// <auto-generated>
using System.Reflection;

namespace Net5.FxResources.System.Security.Cryptography.X509Certificates
{
    internal static class SR { }
}
namespace Net5.System
{
    internal static partial class SR
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager 
            => s_resourceManager 
            ?? (s_resourceManager = new global::System.Resources.ResourceManager(
                typeof(Net5.FxResources.System.Security.Cryptography.X509Certificates.SR)));

        /// <summary>Error occurred during a cryptographic operation.</summary>
        internal static string @Arg_CryptographyException => GetResourceString("Arg_CryptographyException", @"Error occurred during a cryptographic operation.");
        /// <summary>Array may not be empty or null.</summary>
        internal static string @Arg_EmptyOrNullArray => GetResourceString("Arg_EmptyOrNullArray", @"Array may not be empty or null.");
        /// <summary>String cannot be empty or null.</summary>
        internal static string @Arg_EmptyOrNullString => GetResourceString("Arg_EmptyOrNullString", @"String cannot be empty or null.");
        /// <summary>The '{0}' string cannot be empty or null.</summary>
        internal static string @Arg_EmptyOrNullString_Named => GetResourceString("Arg_EmptyOrNullString_Named", @"The '{0}' string cannot be empty or null.");
        /// <summary>Illegal enum value: {0}.</summary>
        internal static string @Arg_EnumIllegalVal => GetResourceString("Arg_EnumIllegalVal", @"Illegal enum value: {0}.");
        /// <summary>Invalid handle.</summary>
        internal static string @Arg_InvalidHandle => GetResourceString("Arg_InvalidHandle", @"Invalid handle.");
        /// <summary>Invalid type.</summary>
        internal static string @Arg_InvalidType => GetResourceString("Arg_InvalidType", @"Invalid type.");
        /// <summary>Non-negative number required.</summary>
        internal static string @Arg_OutOfRange_NeedNonNegNum => GetResourceString("Arg_OutOfRange_NeedNonNegNum", @"Non-negative number required.");
        /// <summary>Only single dimensional arrays are supported for the requested action.</summary>
        internal static string @Arg_RankMultiDimNotSupported => GetResourceString("Arg_RankMultiDimNotSupported", @"Only single dimensional arrays are supported for the requested action.");
        /// <summary>The destination is too small to hold the encoded value.</summary>
        internal static string @Argument_EncodeDestinationTooSmall => GetResourceString("Argument_EncodeDestinationTooSmall", @"The destination is too small to hold the encoded value.");
        /// <summary>Value of flags is invalid.</summary>
        internal static string @Argument_InvalidFlag => GetResourceString("Argument_InvalidFlag", @"Value of flags is invalid.");
        /// <summary>The value of 'nameType' is invalid.</summary>
        internal static string @Argument_InvalidNameType => GetResourceString("Argument_InvalidNameType", @"The value of 'nameType' is invalid.");
        /// <summary>Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.</summary>
        internal static string @Argument_InvalidOffLen => GetResourceString("Argument_InvalidOffLen", @"Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.");
        /// <summary>The OID value was invalid.</summary>
        internal static string @Argument_InvalidOidValue => GetResourceString("Argument_InvalidOidValue", @"The OID value was invalid.");
        /// <summary>Index was out of range. Must be non-negative and less than the size of the collection.</summary>
        internal static string @ArgumentOutOfRange_Index => GetResourceString("ArgumentOutOfRange_Index", @"Index was out of range. Must be non-negative and less than the size of the collection.");
        /// <summary>The certificate has invalid policy.</summary>
        internal static string @Chain_NoPolicyMatch => GetResourceString("Chain_NoPolicyMatch", @"The certificate has invalid policy.");
        /// <summary>The provided value of {0} bytes does not match the expected size of {1} bytes for the algorithm ({2}).</summary>
        internal static string @Cryptography_BadHashSize_ForAlgorithm => GetResourceString("Cryptography_BadHashSize_ForAlgorithm", @"The provided value of {0} bytes does not match the expected size of {1} bytes for the algorithm ({2}).");
        /// <summary>The certificate already has an associated private key.</summary>
        internal static string @Cryptography_Cert_AlreadyHasPrivateKey => GetResourceString("Cryptography_Cert_AlreadyHasPrivateKey", @"The certificate already has an associated private key.");
        /// <summary>The issuer certificate public key algorithm ({0}) does not match the value for this certificate request ({1}), use the X509SignatureGenerator overload.</summary>
        internal static string @Cryptography_CertReq_AlgorithmMustMatch => GetResourceString("Cryptography_CertReq_AlgorithmMustMatch", @"The issuer certificate public key algorithm ({0}) does not match the value for this certificate request ({1}), use the X509SignatureGenerator overload.");
        /// <summary>The issuer certificate does not have a Basic Constraints extension.</summary>
        internal static string @Cryptography_CertReq_BasicConstraintsRequired => GetResourceString("Cryptography_CertReq_BasicConstraintsRequired", @"The issuer certificate does not have a Basic Constraints extension.");
        /// <summary>The provided notBefore value is later than the notAfter value.</summary>
        internal static string @Cryptography_CertReq_DatesReversed => GetResourceString("Cryptography_CertReq_DatesReversed", @"The provided notBefore value is later than the notAfter value.");
        /// <summary>The value predates 1950 and has no defined encoding.</summary>
        internal static string @Cryptography_CertReq_DateTooOld => GetResourceString("Cryptography_CertReq_DateTooOld", @"The value predates 1950 and has no defined encoding.");
        /// <summary>An X509Extension with OID '{0}' has already been specified.</summary>
        internal static string @Cryptography_CertReq_DuplicateExtension => GetResourceString("Cryptography_CertReq_DuplicateExtension", @"An X509Extension with OID '{0}' has already been specified.");
        /// <summary>The issuer certificate does not have an appropriate value for the Basic Constraints extension.</summary>
        internal static string @Cryptography_CertReq_IssuerBasicConstraintsInvalid => GetResourceString("Cryptography_CertReq_IssuerBasicConstraintsInvalid", @"The issuer certificate does not have an appropriate value for the Basic Constraints extension.");
        /// <summary>The issuer certificate's Key Usage extension is present but does not contain the KeyCertSign flag.</summary>
        internal static string @Cryptography_CertReq_IssuerKeyUsageInvalid => GetResourceString("Cryptography_CertReq_IssuerKeyUsageInvalid", @"The issuer certificate's Key Usage extension is present but does not contain the KeyCertSign flag.");
        /// <summary>The provided issuer certificate does not have an associated private key.</summary>
        internal static string @Cryptography_CertReq_IssuerRequiresPrivateKey => GetResourceString("Cryptography_CertReq_IssuerRequiresPrivateKey", @"The provided issuer certificate does not have an associated private key.");
        /// <summary>The requested notAfter value ({0}) is later than issuerCertificate.NotAfter ({1}).</summary>
        internal static string @Cryptography_CertReq_NotAfterNotNested => GetResourceString("Cryptography_CertReq_NotAfterNotNested", @"The requested notAfter value ({0}) is later than issuerCertificate.NotAfter ({1}).");
        /// <summary>The requested notBefore value ({0}) is earlier than issuerCertificate.NotBefore ({1}).</summary>
        internal static string @Cryptography_CertReq_NotBeforeNotNested => GetResourceString("Cryptography_CertReq_NotBeforeNotNested", @"The requested notBefore value ({0}) is earlier than issuerCertificate.NotBefore ({1}).");
        /// <summary>This method cannot be used since no signing key was provided via a constructor, use an overload accepting an X509SignatureGenerator instead.</summary>
        internal static string @Cryptography_CertReq_NoKeyProvided => GetResourceString("Cryptography_CertReq_NoKeyProvided", @"This method cannot be used since no signing key was provided via a constructor, use an overload accepting an X509SignatureGenerator instead.");
        /// <summary>The issuer certificate uses an RSA key but no RSASignaturePadding was provided to a constructor. If one cannot be provided, use the X509SignatureGenerator overload.</summary>
        internal static string @Cryptography_CertReq_RSAPaddingRequired => GetResourceString("Cryptography_CertReq_RSAPaddingRequired", @"The issuer certificate uses an RSA key but no RSASignaturePadding was provided to a constructor. If one cannot be provided, use the X509SignatureGenerator overload.");
        /// <summary>Object contains only the public half of a key pair. A private key must also be provided.</summary>
        internal static string @Cryptography_CSP_NoPrivateKey => GetResourceString("Cryptography_CSP_NoPrivateKey", @"Object contains only the public half of a key pair. A private key must also be provided.");
        /// <summary>The specified curve '{0}' or its parameters are not valid for this platform.</summary>
        internal static string @Cryptography_CurveNotSupported => GetResourceString("Cryptography_CurveNotSupported", @"The specified curve '{0}' or its parameters are not valid for this platform.");
        /// <summary>Only named curves are supported on this platform.</summary>
        internal static string @Cryptography_ECC_NamedCurvesOnly => GetResourceString("Cryptography_ECC_NamedCurvesOnly", @"Only named curves are supported on this platform.");
        /// <summary>The message exceeds the maximum allowable length for the chosen options ({0}).</summary>
        internal static string @Cryptography_Encryption_MessageTooLong => GetResourceString("Cryptography_Encryption_MessageTooLong", @"The message exceeds the maximum allowable length for the chosen options ({0}).");
        /// <summary>ASN1 corrupted data.</summary>
        internal static string @Cryptography_Der_Invalid_Encoding => GetResourceString("Cryptography_Der_Invalid_Encoding", @"ASN1 corrupted data.");
        /// <summary>The hash algorithm name cannot be null or empty.</summary>
        internal static string @Cryptography_HashAlgorithmNameNullOrEmpty => GetResourceString("Cryptography_HashAlgorithmNameNullOrEmpty", @"The hash algorithm name cannot be null or empty.");
        /// <summary>The specified Characteristic2 curve parameters are not valid. Polynomial, A, B, G.X, G.Y, and Order are required. A, B, G.X, G.Y must be the same length, and the same length as Q.X, Q.Y and D if those are specified. Seed, Cofactor and Hash are optional. Ot ...</summary>
        internal static string @Cryptography_InvalidECCharacteristic2Curve => GetResourceString("Cryptography_InvalidECCharacteristic2Curve", @"The specified Characteristic2 curve parameters are not valid. Polynomial, A, B, G.X, G.Y, and Order are required. A, B, G.X, G.Y must be the same length, and the same length as Q.X, Q.Y and D if those are specified. Seed, Cofactor and Hash are optional. Other parameters are not allowed.");
        /// <summary>The chain context handle is invalid.</summary>
        internal static string @Cryptography_InvalidContextHandle => GetResourceString("Cryptography_InvalidContextHandle", @"The chain context handle is invalid.");
        /// <summary>{0} is an invalid handle.</summary>
        internal static string @Cryptography_InvalidHandle => GetResourceString("Cryptography_InvalidHandle", @"{0} is an invalid handle.");
        /// <summary>Object identifier (OID) is unknown.</summary>
        internal static string @Cryptography_InvalidOID => GetResourceString("Cryptography_InvalidOID", @"Object identifier (OID) is unknown.");
        /// <summary>Specified padding mode is not valid for this algorithm.</summary>
        internal static string @Cryptography_InvalidPaddingMode => GetResourceString("Cryptography_InvalidPaddingMode", @"Specified padding mode is not valid for this algorithm.");
        /// <summary>The provided PublicKey object is invalid, valid Oid and EncodedKeyValue property values are required.</summary>
        internal static string @Cryptography_InvalidPublicKey_Object => GetResourceString("Cryptography_InvalidPublicKey_Object", @"The provided PublicKey object is invalid, valid Oid and EncodedKeyValue property values are required.");
        /// <summary>The specified RSA parameters are not valid. Exponent and Modulus are required. If D is present, it must have the same length as Modulus. If D is present, P, Q, DP, DQ, and InverseQ are required and must have half the length of Modulus, rounded up, otherwis ...</summary>
        internal static string @Cryptography_InvalidRsaParameters => GetResourceString("Cryptography_InvalidRsaParameters", @"The specified RSA parameters are not valid. Exponent and Modulus are required. If D is present, it must have the same length as Modulus. If D is present, P, Q, DP, DQ, and InverseQ are required and must have half the length of Modulus, rounded up, otherwise they must be omitted.");
        /// <summary>The store handle is invalid.</summary>
        internal static string @Cryptography_InvalidStoreHandle => GetResourceString("Cryptography_InvalidStoreHandle", @"The store handle is invalid.");
        /// <summary>Custom trust certificates were provided while in System trust mode.</summary>
        internal static string @Cryptography_CustomTrustCertsInSystemMode => GetResourceString("Cryptography_CustomTrustCertsInSystemMode", @"Custom trust certificates were provided while in System trust mode.");
        /// <summary>A null or disposed certificate was present in CustomTrustStore.</summary>
        internal static string @Cryptography_InvalidTrustCertificate => GetResourceString("Cryptography_InvalidTrustCertificate", @"A null or disposed certificate was present in CustomTrustStore.");
        /// <summary>The key is too small for the requested operation.</summary>
        internal static string @Cryptography_KeyTooSmall => GetResourceString("Cryptography_KeyTooSmall", @"The key is too small for the requested operation.");
        /// <summary>Error occurred while decoding OAEP padding.</summary>
        internal static string @Cryptography_OAEP_Decryption_Failed => GetResourceString("Cryptography_OAEP_Decryption_Failed", @"Error occurred while decoding OAEP padding.");
        /// <summary>Cannot open an invalid handle.</summary>
        internal static string @Cryptography_OpenInvalidHandle => GetResourceString("Cryptography_OpenInvalidHandle", @"Cannot open an invalid handle.");
        /// <summary>A certificate referenced a private key which was already referenced, or could not be loaded.</summary>
        internal static string @Cryptography_Pfx_BadKeyReference => GetResourceString("Cryptography_Pfx_BadKeyReference", @"A certificate referenced a private key which was already referenced, or could not be loaded.");
        /// <summary>The certificate data cannot be read with the provided password, the password may be incorrect.</summary>
        internal static string @Cryptography_Pfx_BadPassword => GetResourceString("Cryptography_Pfx_BadPassword", @"The certificate data cannot be read with the provided password, the password may be incorrect.");
        /// <summary>The provided PFX data contains no certificates.</summary>
        internal static string @Cryptography_Pfx_NoCertificates => GetResourceString("Cryptography_Pfx_NoCertificates", @"The provided PFX data contains no certificates.");
        /// <summary>The provided key does not match the public key for this certificate.</summary>
        internal static string @Cryptography_PrivateKey_DoesNotMatch => GetResourceString("Cryptography_PrivateKey_DoesNotMatch", @"The provided key does not match the public key for this certificate.");
        /// <summary>The provided key does not match the public key algorithm for this certificate.</summary>
        internal static string @Cryptography_PrivateKey_WrongAlgorithm => GetResourceString("Cryptography_PrivateKey_WrongAlgorithm", @"The provided key does not match the public key algorithm for this certificate.");
        /// <summary>The length of the data to decrypt is not valid for the size of this key.</summary>
        internal static string @Cryptography_RSA_DecryptWrongSize => GetResourceString("Cryptography_RSA_DecryptWrongSize", @"The length of the data to decrypt is not valid for the size of this key.");
        /// <summary>The provided hash value is not the expected size for the specified hash algorithm.</summary>
        internal static string @Cryptography_SignHash_WrongSize => GetResourceString("Cryptography_SignHash_WrongSize", @"The provided hash value is not the expected size for the specified hash algorithm.");
        /// <summary>The Disallowed store is not supported on this platform, but already has data. All files under '{0}' must be removed.</summary>
        internal static string @Cryptography_Unix_X509_DisallowedStoreNotEmpty => GetResourceString("Cryptography_Unix_X509_DisallowedStoreNotEmpty", @"The Disallowed store is not supported on this platform, but already has data. All files under '{0}' must be removed.");
        /// <summary>Unix LocalMachine X509Stores are read-only for all users.</summary>
        internal static string @Cryptography_Unix_X509_MachineStoresReadOnly => GetResourceString("Cryptography_Unix_X509_MachineStoresReadOnly", @"Unix LocalMachine X509Stores are read-only for all users.");
        /// <summary>Unix LocalMachine X509Store is limited to the Root and CertificateAuthority stores.</summary>
        internal static string @Cryptography_Unix_X509_MachineStoresRootOnly => GetResourceString("Cryptography_Unix_X509_MachineStoresRootOnly", @"Unix LocalMachine X509Store is limited to the Root and CertificateAuthority stores.");
        /// <summary>The Disallowed store is not supported on this platform.</summary>
        internal static string @Cryptography_Unix_X509_NoDisallowedStore => GetResourceString("Cryptography_Unix_X509_NoDisallowedStore", @"The Disallowed store is not supported on this platform.");
        /// <summary>The {0} value cannot be set on Unix.</summary>
        internal static string @Cryptography_Unix_X509_PropertyNotSettable => GetResourceString("Cryptography_Unix_X509_PropertyNotSettable", @"The {0} value cannot be set on Unix.");
        /// <summary>'{0}' is not a known hash algorithm.</summary>
        internal static string @Cryptography_UnknownHashAlgorithm => GetResourceString("Cryptography_UnknownHashAlgorithm", @"'{0}' is not a known hash algorithm.");
        /// <summary>'{0}' is not a known key algorithm.</summary>
        internal static string @Cryptography_UnknownKeyAlgorithm => GetResourceString("Cryptography_UnknownKeyAlgorithm", @"'{0}' is not a known key algorithm.");
        /// <summary>X509ContentType.SerializedCert and X509ContentType.SerializedStore are not supported on Unix.</summary>
        internal static string @Cryptography_Unix_X509_SerializedExport => GetResourceString("Cryptography_Unix_X509_SerializedExport", @"X509ContentType.SerializedCert and X509ContentType.SerializedStore are not supported on Unix.");
        /// <summary>The system cryptographic library returned error '{0}' of type '{1}'</summary>
        internal static string @Cryptography_Unmapped_System_Typed_Error => GetResourceString("Cryptography_Unmapped_System_Typed_Error", @"The system cryptographic library returned error '{0}' of type '{1}'");
        /// <summary>The certificate export operation failed.</summary>
        internal static string @Cryptography_X509_ExportFailed => GetResourceString("Cryptography_X509_ExportFailed", @"The certificate export operation failed.");
        /// <summary>The parameter should be an X509Extension.</summary>
        internal static string @Cryptography_X509_ExtensionMismatch => GetResourceString("Cryptography_X509_ExtensionMismatch", @"The parameter should be an X509Extension.");
        /// <summary>Invalid content type.</summary>
        internal static string @Cryptography_X509_InvalidContentType => GetResourceString("Cryptography_X509_InvalidContentType", @"Invalid content type.");
        /// <summary>Invalid find type.</summary>
        internal static string @Cryptography_X509_InvalidFindType => GetResourceString("Cryptography_X509_InvalidFindType", @"Invalid find type.");
        /// <summary>Invalid find value.</summary>
        internal static string @Cryptography_X509_InvalidFindValue => GetResourceString("Cryptography_X509_InvalidFindValue", @"Invalid find value.");
        /// <summary>The flags '{0}' may not be specified together.</summary>
        internal static string @Cryptography_X509_InvalidFlagCombination => GetResourceString("Cryptography_X509_InvalidFlagCombination", @"The flags '{0}' may not be specified together.");
        /// <summary>Cannot find the original signer.</summary>
        internal static string @Cryptography_X509_PKCS7_NoSigner => GetResourceString("Cryptography_X509_PKCS7_NoSigner", @"Cannot find the original signer.");
        /// <summary>The X509 certificate could not be added to the store.</summary>
        internal static string @Cryptography_X509_StoreAddFailure => GetResourceString("Cryptography_X509_StoreAddFailure", @"The X509 certificate could not be added to the store.");
        /// <summary>The X509 certificate could not be added to the store because all candidate file names were in use.</summary>
        internal static string @Cryptography_X509_StoreNoFileAvailable => GetResourceString("Cryptography_X509_StoreNoFileAvailable", @"The X509 certificate could not be added to the store because all candidate file names were in use.");
        /// <summary>The specified X509 certificate store does not exist.</summary>
        internal static string @Cryptography_X509_StoreNotFound => GetResourceString("Cryptography_X509_StoreNotFound", @"The specified X509 certificate store does not exist.");
        /// <summary>The X509 certificate store has not been opened.</summary>
        internal static string @Cryptography_X509_StoreNotOpen => GetResourceString("Cryptography_X509_StoreNotOpen", @"The X509 certificate store has not been opened.");
        /// <summary>The X509 certificate store is read-only.</summary>
        internal static string @Cryptography_X509_StoreReadOnly => GetResourceString("Cryptography_X509_StoreReadOnly", @"The X509 certificate store is read-only.");
        /// <summary>The platform does not have a definition for an X509 certificate store named '{0}' with a StoreLocation of '{1}', and does not support creating it.</summary>
        internal static string @Cryptography_X509_StoreCannotCreate => GetResourceString("Cryptography_X509_StoreCannotCreate", @"The platform does not have a definition for an X509 certificate store named '{0}' with a StoreLocation of '{1}', and does not support creating it.");
        /// <summary>Enumeration has not started. Call MoveNext.</summary>
        internal static string @InvalidOperation_EnumNotStarted => GetResourceString("InvalidOperation_EnumNotStarted", @"Enumeration has not started. Call MoveNext.");
        /// <summary>CryptoApi ECDsa keys are not supported.</summary>
        internal static string @NotSupported_ECDsa_Csp => GetResourceString("NotSupported_ECDsa_Csp", @"CryptoApi ECDsa keys are not supported.");
        /// <summary>Only one certificate with a private key can be exported in a single PFX.</summary>
        internal static string @NotSupported_Export_MultiplePrivateCerts => GetResourceString("NotSupported_Export_MultiplePrivateCerts", @"Only one certificate with a private key can be exported in a single PFX.");
        /// <summary>The certificate key algorithm is not supported.</summary>
        internal static string @NotSupported_KeyAlgorithm => GetResourceString("NotSupported_KeyAlgorithm", @"The certificate key algorithm is not supported.");
        /// <summary>The X509 Basic Constraints extension with OID 2.5.29.10 is not supported.</summary>
        internal static string @NotSupported_LegacyBasicConstraints => GetResourceString("NotSupported_LegacyBasicConstraints", @"The X509 Basic Constraints extension with OID 2.5.29.10 is not supported.");
        /// <summary>X509Certificate is immutable on this platform. Use the equivalent constructor instead.</summary>
        internal static string @NotSupported_ImmutableX509Certificate => GetResourceString("NotSupported_ImmutableX509Certificate", @"X509Certificate is immutable on this platform. Use the equivalent constructor instead.");
        /// <summary>The home directory of the current user could not be determined.</summary>
        internal static string @PersistedFiles_NoHomeDirectory => GetResourceString("PersistedFiles_NoHomeDirectory", @"The home directory of the current user could not be determined.");
        /// <summary>The {0} value was invalid.</summary>
        internal static string @Security_InvalidValue => GetResourceString("Security_InvalidValue", @"The {0} value was invalid.");
        /// <summary>Access is denied.</summary>
        internal static string @Security_AccessDenied => GetResourceString("Security_AccessDenied", @"Access is denied.");
        /// <summary>Unknown error.</summary>
        internal static string @Unknown_Error => GetResourceString("Unknown_Error", @"Unknown error.");
        /// <summary>Unable to get file status.</summary>
        internal static string @Cryptography_FileStatusError => GetResourceString("Cryptography_FileStatusError", @"Unable to get file status.");
        /// <summary>Invalid directory permissions. The directory '{0}' must be readable, writable and executable by the owner.</summary>
        internal static string @Cryptography_InvalidDirectoryPermissions => GetResourceString("Cryptography_InvalidDirectoryPermissions", @"Invalid directory permissions. The directory '{0}' must be readable, writable and executable by the owner.");
        /// <summary>The owner of '{0}' is not the current user.</summary>
        internal static string @Cryptography_OwnerNotCurrentUser => GetResourceString("Cryptography_OwnerNotCurrentUser", @"The owner of '{0}' is not the current user.");
        /// <summary>Invalid file permissions. The file '{0}' must readable and writable by the current owner and by no one else, and the permissions could not be changed to meet that criteria.</summary>
        internal static string @Cryptography_InvalidFilePermissions => GetResourceString("Cryptography_InvalidFilePermissions", @"Invalid file permissions. The file '{0}' must readable and writable by the current owner and by no one else, and the permissions could not be changed to meet that criteria.");
        /// <summary>The string contains an invalid X500 name attribute key, oid, value or delimiter.</summary>
        internal static string @Cryptography_Invalid_X500Name => GetResourceString("Cryptography_Invalid_X500Name", @"The string contains an invalid X500 name attribute key, oid, value or delimiter.");
        /// <summary>The string contains a character not in the 7 bit ASCII character set.</summary>
        internal static string @Cryptography_Invalid_IA5String => GetResourceString("Cryptography_Invalid_IA5String", @"The string contains a character not in the 7 bit ASCII character set.");
        /// <summary>This platform does not support loading with EphemeralKeySet. Remove the flag to allow keys to be temporarily created on disk.</summary>
        internal static string @Cryptography_X509_NoEphemeralPfx => GetResourceString("Cryptography_X509_NoEphemeralPfx", @"This platform does not support loading with EphemeralKeySet. Remove the flag to allow keys to be temporarily created on disk.");
        /// <summary>Removing the requested certificate would modify user trust settings, and has been denied.</summary>
        internal static string @Cryptography_X509Store_WouldModifyUserTrust => GetResourceString("Cryptography_X509Store_WouldModifyUserTrust", @"Removing the requested certificate would modify user trust settings, and has been denied.");
        /// <summary>Removing the requested certificate would modify admin trust settings, and has been denied.</summary>
        internal static string @Cryptography_X509Store_WouldModifyAdminTrust => GetResourceString("Cryptography_X509Store_WouldModifyAdminTrust", @"Removing the requested certificate would modify admin trust settings, and has been denied.");
        /// <summary>Specified key is not a valid size for this algorithm.</summary>
        internal static string @Cryptography_InvalidKeySize => GetResourceString("Cryptography_InvalidKeySize", @"Specified key is not a valid size for this algorithm.");
        /// <summary>DSA keys can be imported, but new key generation is not supported on this platform.</summary>
        internal static string @Cryptography_DSA_KeyGenNotSupported => GetResourceString("Cryptography_DSA_KeyGenNotSupported", @"DSA keys can be imported, but new key generation is not supported on this platform.");
        /// <summary>The specified DSA parameters are not valid; P, Q, G and Y are all required.</summary>
        internal static string @Cryptography_InvalidDsaParameters_MissingFields => GetResourceString("Cryptography_InvalidDsaParameters_MissingFields", @"The specified DSA parameters are not valid; P, Q, G and Y are all required.");
        /// <summary>The specified DSA parameters are not valid; P, G and Y must be the same length (the key size).</summary>
        internal static string @Cryptography_InvalidDsaParameters_MismatchedPGY => GetResourceString("Cryptography_InvalidDsaParameters_MismatchedPGY", @"The specified DSA parameters are not valid; P, G and Y must be the same length (the key size).");
        /// <summary>The specified DSA parameters are not valid; Q and X (if present) must be the same length.</summary>
        internal static string @Cryptography_InvalidDsaParameters_MismatchedQX => GetResourceString("Cryptography_InvalidDsaParameters_MismatchedQX", @"The specified DSA parameters are not valid; Q and X (if present) must be the same length.");
        /// <summary>The specified DSA parameters are not valid; J (if present) must be shorter than P.</summary>
        internal static string @Cryptography_InvalidDsaParameters_MismatchedPJ => GetResourceString("Cryptography_InvalidDsaParameters_MismatchedPJ", @"The specified DSA parameters are not valid; J (if present) must be shorter than P.");
        /// <summary>The specified DSA parameters are not valid; Seed, if present, must be 20 bytes long for keys shorter than 1024 bits.</summary>
        internal static string @Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey => GetResourceString("Cryptography_InvalidDsaParameters_SeedRestriction_ShortKey", @"The specified DSA parameters are not valid; Seed, if present, must be 20 bytes long for keys shorter than 1024 bits.");
        /// <summary>The specified DSA parameters are not valid; Q must be 20 bytes long for keys shorter than 1024 bits.</summary>
        internal static string @Cryptography_InvalidDsaParameters_QRestriction_ShortKey => GetResourceString("Cryptography_InvalidDsaParameters_QRestriction_ShortKey", @"The specified DSA parameters are not valid; Q must be 20 bytes long for keys shorter than 1024 bits.");
        /// <summary>The specified DSA parameters are not valid; Q's length must be one of 20, 32 or 64 bytes.</summary>
        internal static string @Cryptography_InvalidDsaParameters_QRestriction_LargeKey => GetResourceString("Cryptography_InvalidDsaParameters_QRestriction_LargeKey", @"The specified DSA parameters are not valid; Q's length must be one of 20, 32 or 64 bytes.");
        /// <summary>The input to WriteEncodedValue must represent a single encoded value with no trailing data.</summary>
        internal static string @Cryptography_WriteEncodedValue_OneValueAtATime => GetResourceString("Cryptography_WriteEncodedValue_OneValueAtATime", @"The input to WriteEncodedValue must represent a single encoded value with no trailing data.");
        /// <summary>ASN.1 Enumerated values only apply to enum types without the [Flags] attribute.</summary>
        internal static string @Cryptography_Asn_EnumeratedValueRequiresNonFlagsEnum => GetResourceString("Cryptography_Asn_EnumeratedValueRequiresNonFlagsEnum", @"ASN.1 Enumerated values only apply to enum types without the [Flags] attribute.");
        /// <summary>Named bit list operations require an enum with the [Flags] attribute.</summary>
        internal static string @Cryptography_Asn_NamedBitListRequiresFlagsEnum => GetResourceString("Cryptography_Asn_NamedBitListRequiresFlagsEnum", @"Named bit list operations require an enum with the [Flags] attribute.");
        /// <summary>The encoded named bit list value is larger than the value size of the '{0}' enum.</summary>
        internal static string @Cryptography_Asn_NamedBitListValueTooBig => GetResourceString("Cryptography_Asn_NamedBitListValueTooBig", @"The encoded named bit list value is larger than the value size of the '{0}' enum.");
        /// <summary>Tags with TagClass Universal must have the appropriate TagValue value for the data type being read or written.</summary>
        internal static string @Cryptography_Asn_UniversalValueIsFixed => GetResourceString("Cryptography_Asn_UniversalValueIsFixed", @"Tags with TagClass Universal must have the appropriate TagValue value for the data type being read or written.");
        /// <summary>Unused bit count must be between 0 and 7, inclusive.</summary>
        internal static string @Cryptography_Asn_UnusedBitCountRange => GetResourceString("Cryptography_Asn_UnusedBitCountRange", @"Unused bit count must be between 0 and 7, inclusive.");
        /// <summary>Encode cannot be called while a Sequence or SetOf is still open.</summary>
        internal static string @Cryptography_AsnWriter_EncodeUnbalancedStack => GetResourceString("Cryptography_AsnWriter_EncodeUnbalancedStack", @"Encode cannot be called while a Sequence or SetOf is still open.");
        /// <summary>Cannot pop the requested tag as it is not currently in progress.</summary>
        internal static string @Cryptography_AsnWriter_PopWrongTag => GetResourceString("Cryptography_AsnWriter_PopWrongTag", @"Cannot pop the requested tag as it is not currently in progress.");
        /// <summary>Key is not a valid public or private key.</summary>
        internal static string @Cryptography_NotValidPublicOrPrivateKey => GetResourceString("Cryptography_NotValidPublicOrPrivateKey", @"Key is not a valid public or private key.");
        /// <summary>The EncryptedPrivateKeyInfo structure was decoded but was not successfully interpreted, the password may be incorrect.</summary>
        internal static string @Cryptography_Pkcs8_EncryptedReadFailed => GetResourceString("Cryptography_Pkcs8_EncryptedReadFailed", @"The EncryptedPrivateKeyInfo structure was decoded but was not successfully interpreted, the password may be incorrect.");
        /// <summary>The algorithm identified by '{0}' is unknown, not valid for the requested usage, or was not handled.</summary>
        internal static string @Cryptography_UnknownAlgorithmIdentifier => GetResourceString("Cryptography_UnknownAlgorithmIdentifier", @"The algorithm identified by '{0}' is unknown, not valid for the requested usage, or was not handled.");
        /// <summary>Value was invalid.</summary>
        internal static string @Argument_InvalidValue => GetResourceString("Argument_InvalidValue", @"Value was invalid.");
        /// <summary>The KDF for algorithm '{0}' requires a char-based password input.</summary>
        internal static string @Cryptography_AlgKdfRequiresChars => GetResourceString("Cryptography_AlgKdfRequiresChars", @"The KDF for algorithm '{0}' requires a char-based password input.");
        /// <summary>The provided RSAPrivateKey value has version '{0}', but version '{1}' is the maximum supported.</summary>
        internal static string @Cryptography_RSAPrivateKey_VersionTooNew => GetResourceString("Cryptography_RSAPrivateKey_VersionTooNew", @"The provided RSAPrivateKey value has version '{0}', but version '{1}' is the maximum supported.");
        /// <summary>Key is not a valid private key.</summary>
        internal static string @Cryptography_NotValidPrivateKey => GetResourceString("Cryptography_NotValidPrivateKey", @"Key is not a valid private key.");

    }
}
